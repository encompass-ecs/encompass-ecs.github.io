<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drawing a Paddle on Encompass Docs</title>
    <link>/pong/draw_paddle/</link>
    <description>Recent content in Drawing a Paddle on Encompass Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 23 May 2019 11:02:45 -0700</lastBuildDate>
    
	<atom:link href="/pong/draw_paddle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Canvas Component</title>
      <link>/pong/draw_paddle/canvas_component/</link>
      <pubDate>Thu, 23 May 2019 11:26:31 -0700</pubDate>
      
      <guid>/pong/draw_paddle/canvas_component/</guid>
      <description>LOVE provides a neat little drawing feature called Canvases. You can tell LOVE to draw to a Canvas instead of the screen, and then save the Canvas so you don&amp;rsquo;t have to repeat lots of draw procedures. It&amp;rsquo;s very nifty.
Let&amp;rsquo;s set up a CanvasComponent. To create a new Component type, we extend the Component class.
Create a file: game/components/canvas.ts
import { DrawComponent } from &amp;quot;encompass-ecs&amp;quot;; export class CanvasComponent extends DrawComponent { public canvas: Canvas; public x_scale: number; public y_scale: number; }  Let&amp;rsquo;s break this down a bit.</description>
    </item>
    
    <item>
      <title>Position Component</title>
      <link>/pong/draw_paddle/position_component/</link>
      <pubDate>Thu, 23 May 2019 11:34:58 -0700</pubDate>
      
      <guid>/pong/draw_paddle/position_component/</guid>
      <description>This one is pretty simple. We can&amp;rsquo;t draw something if we don&amp;rsquo;t know where on screen to draw it.
Well, why didn&amp;rsquo;t we put that in the CanvasComponent? The reason is that position is a concept that is relevant in more situations than just drawing. For example: collision, yeah? So it really needs to be its own component.
Create a file: game/components/position.ts
import { Component } from &amp;quot;encompass-ecs&amp;quot;; export class PositionComponent extends Component { public x: number; public y: number; }  That&amp;rsquo;s it!</description>
    </item>
    
    <item>
      <title>Canvas Renderer</title>
      <link>/pong/draw_paddle/canvas_renderer/</link>
      <pubDate>Thu, 23 May 2019 11:29:24 -0700</pubDate>
      
      <guid>/pong/draw_paddle/canvas_renderer/</guid>
      <description>Now that we have a CanvasComponent, we need to tell Encompass how to draw things that have it.
Create a file: game/renderers/canvas.ts
This is gonna be a bit more complex than our Components, so let&amp;rsquo;s take this slowly.
import { Entity, EntityRenderer } from &amp;quot;encompass-ecs&amp;quot;; import { CanvasComponent } from &amp;quot;game/components/canvas&amp;quot;; import { PositionComponent } from &amp;quot;game/components/position&amp;quot;; @Renders(CanvasComponent, PositionComponent) export class CanvasRenderer extends EntityRenderer { public render(entity: Entity) {} }  An EntityRenderer is defined by the Components it tracks and a render method.</description>
    </item>
    
    <item>
      <title>Initializing the World</title>
      <link>/pong/draw_paddle/initialize_world/</link>
      <pubDate>Thu, 23 May 2019 12:06:18 -0700</pubDate>
      
      <guid>/pong/draw_paddle/initialize_world/</guid>
      <description>It&amp;rsquo;s time to put it all together.
Let&amp;rsquo;s look at our game/game.ts file. The load method looks like this:
public load() { this.canvas = love.graphics.newCanvas(); const world_builder = new WorldBuilder(); // ADD YOUR ENGINES HERE... // ADD YOUR RENDERERS HERE... // ADD YOUR STARTING ENTITIES HERE... this.world = world_builder.build(); }  Let&amp;rsquo;s do as the helpful file asks, eh?
import { CanvasRenderer } from &amp;quot;./renderers/canvas&amp;quot;; ... export class Game { .</description>
    </item>
    
    <item>
      <title>First Run</title>
      <link>/pong/draw_paddle/first_run/</link>
      <pubDate>Thu, 23 May 2019 12:21:05 -0700</pubDate>
      
      <guid>/pong/draw_paddle/first_run/</guid>
      <description>All we have to do now is run our build and run script in the terminal.
&amp;gt; npm run love  Exciting!! Let&amp;rsquo;s see what happens&amp;hellip;
Oh dear. That paddle is quite small. Bit of a buzzkill really.
const width = 20; const height = 120;  position_component.x = 40; position_component.y = 360;  Thaaaaaaat&amp;rsquo;s more like it.
Notice how we can just change simple Component values, and the result of the simulation changes.</description>
    </item>
    
  </channel>
</rss>