<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scoring on Encompass Docs</title>
    <link>/pong/scoring/</link>
    <description>Recent content in Scoring on Encompass Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 30 May 2019 16:08:54 -0700</lastBuildDate>
    
	<atom:link href="/pong/scoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Goal Collision</title>
      <link>/pong/scoring/goal_collision/</link>
      <pubDate>Mon, 03 Jun 2019 12:39:11 -0700</pubDate>
      
      <guid>/pong/scoring/goal_collision/</guid>
      <description>First we will need a new collision type for goals.
export enum CollisionType { ball, goal, paddle, wall, }  And a BallGoalCollisionMessage:
import { Entity, Message } from &amp;quot;encompass-ecs&amp;quot;; export class BallGoalCollisionMessage extends Message { public ball_entity: Entity; public goal_entity: Entity; }  And some dispatch logic in the CollisionDispatchEngine:
... switch (collision_message.collision_type_one) { case CollisionType.ball: switch (collision_message.collision_type_two) { case CollisionType.goal: { const message = this.emit_message(BallGoalCollisionMessage); message.ball_entity = collision_message.entity_one; message.</description>
    </item>
    
    <item>
      <title>Ball Respawn</title>
      <link>/pong/scoring/ball_respawn/</link>
      <pubDate>Tue, 04 Jun 2019 10:44:53 -0700</pubDate>
      
      <guid>/pong/scoring/ball_respawn/</guid>
      <description>In Pong, when the ball collides with the goal, we want it to respawn after a set amount of time, fired from a random point in the center of the play area in a variable direction.
We can easily implement a timer by using a Component.
Let&amp;rsquo;s create a new Entity: a timed ball spawner.
You should be getting fairly familiar with this process by now. We&amp;rsquo;ll need a Component, a Message, and a Spawner.</description>
    </item>
    
    <item>
      <title>Tracking the Score</title>
      <link>/pong/scoring/tracking_score/</link>
      <pubDate>Tue, 04 Jun 2019 16:49:50 -0700</pubDate>
      
      <guid>/pong/scoring/tracking_score/</guid>
      <description>Finally, we need to track the score and update it appropriately.
I think a scoring Component is appropriate.
import { Component } from &amp;quot;encompass-ecs&amp;quot;; export class ScoreComponent extends Component { public score: number; }  We should have two different scores, and they should update based on which specific goal is touched by the ball.
I think we need another tag component.
import { Component } from &amp;quot;encompass-ecs&amp;quot;; export class GoalOneComponent extends Component {}  import { Component } from &amp;quot;encompass-ecs&amp;quot;; export class GoalTwoComponent extends Component {}  I know what you&amp;rsquo;re thinking.</description>
    </item>
    
    <item>
      <title>Drawing the Score</title>
      <link>/pong/scoring/drawing_score/</link>
      <pubDate>Tue, 04 Jun 2019 17:21:52 -0700</pubDate>
      
      <guid>/pong/scoring/drawing_score/</guid>
      <description>Remember Renderers? Haven&amp;rsquo;t thought about those in a while.
All we need to draw new elements to the screen are Renderers. Let&amp;rsquo;s create a new GeneralRenderer.
But first, we&amp;rsquo;re gonna need a font. I liked this font. But you can pick any font you like. It&amp;rsquo;s your world and you can do whatever you like in it.
Place the font of your heart&amp;rsquo;s desire into the directory game/assets/fonts. Then it can be used in your game.</description>
    </item>
    
    <item>
      <title>Center Line</title>
      <link>/pong/scoring/center_line/</link>
      <pubDate>Fri, 07 Jun 2019 10:43:23 -0700</pubDate>
      
      <guid>/pong/scoring/center_line/</guid>
      <description>Now we need to draw the center line.
This will be a fairly basic GeneralRenderer - it doesn&amp;rsquo;t need to react to anything.
import { GeneralRenderer } from &amp;quot;encompass-ecs&amp;quot;; export class CenterLineRenderer extends GeneralRenderer { public layer = 0; private middle: number; private height: number; public initialize(middle: number, height: number) { this.middle = middle; this.height = height; } public render() { love.graphics.setLineWidth(2); this.dotted_line(this.middle, 0, this.middle, this.height, 10, 10); } private dotted_line(x1: number, y1: number, x2: number, y2: number, dash: number, gap: number) { const dx = x2 - x1; const dy = y2 - y1; const angle = math.</description>
    </item>
    
  </channel>
</rss>