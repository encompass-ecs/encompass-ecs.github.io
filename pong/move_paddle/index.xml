<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Moving the Paddle on Encompass Docs</title>
    <link>/pong/move_paddle/</link>
    <description>Recent content in Moving the Paddle on Encompass Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 23 May 2019 12:59:29 -0700</lastBuildDate>
    
	<atom:link href="/pong/move_paddle/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Motion Engine</title>
      <link>/pong/move_paddle/motion_engine/</link>
      <pubDate>Thu, 23 May 2019 13:03:39 -0700</pubDate>
      
      <guid>/pong/move_paddle/motion_engine/</guid>
      <description>To create an Engine, we extend the Engine class.
Create a file: game/engines/motion.ts
import { Engine } from &amp;quot;encompass-ecs&amp;quot;; export class MotionEngine extends Engine { public update(dt: number) {} }  Every Engine needs an update method, which optionally takes a delta-time value as a parameter.
delta-time is simply the time that has elapsed between the last frame and the current one in seconds. We&amp;rsquo;ll talk more about why this is important in a minute.</description>
    </item>
    
    <item>
      <title>Input Handling</title>
      <link>/pong/move_paddle/input_handling/</link>
      <pubDate>Thu, 23 May 2019 13:38:42 -0700</pubDate>
      
      <guid>/pong/move_paddle/input_handling/</guid>
      <description>In Pong, the paddles move when the player moves the joystick on their controller up or down.
We currently have a MotionEngine that reads MotionMessages and moves the PositionComponents they reference.
So&amp;hellip; it makes sense that we would have an InputEngine that sends MotionMessages, yeah?
Create a file: game/engines/input.ts
import { Engine } from &amp;quot;encompass-ecs&amp;quot;; import { MotionMessage } from &amp;quot;game/messages/component/motion&amp;quot;; export class InputEngine extends Engine { public update() { if (love.</description>
    </item>
    
    <item>
      <title>Frame-Dependence</title>
      <link>/pong/move_paddle/frame_dependence/</link>
      <pubDate>Thu, 23 May 2019 14:12:20 -0700</pubDate>
      
      <guid>/pong/move_paddle/frame_dependence/</guid>
      <description>Oh dear. That doesn&amp;rsquo;t seem right at all.
The paddle is moving way too fast. But our speed value is only 10. What&amp;rsquo;s going on?
Remember when I mentioned frame-dependence and delta-time earlier? This is a classic example of frame-dependence. Notice that the FPS, or frames-per-second, of the game is around 500 in the above recording. Our motion message when we press the &amp;ldquo;up&amp;rdquo; key on the keyboard tells the paddle to move 10 units.</description>
    </item>
    
    <item>
      <title>Magic Values</title>
      <link>/pong/move_paddle/magic_values/</link>
      <pubDate>Thu, 23 May 2019 15:51:58 -0700</pubDate>
      
      <guid>/pong/move_paddle/magic_values/</guid>
      <description>Our code right now is violating one more good architecture principle.
if (love.keyboard.isDown(&amp;quot;up&amp;quot;)) { const message = this.emit_component_message(MotionMessage, player_one_position_component); message.x = 0; message.y = -10; }  Magic values refer to numbers that have been placed directly in the code. The values being set to message.x and message.y above are magic values. Why are magic values bad?
Magic values introduce the possibility of duplication. Let&amp;rsquo;s say I start adding my code to be able to move paddles down.</description>
    </item>
    
    <item>
      <title>Decoupling</title>
      <link>/pong/move_paddle/decoupling/</link>
      <pubDate>Thu, 23 May 2019 16:37:26 -0700</pubDate>
      
      <guid>/pong/move_paddle/decoupling/</guid>
      <description>There&amp;rsquo;s more to decoupling than just objects not directly referencing each other.
Really, when we talk about decoupling, we are saying that we don&amp;rsquo;t want the structure of the program having unnecessary direct connections.
This is a pretty abstract principle, but there is a nice illustration of it in our program as it exists right now.
Right now our InputEngine is sending Messages to our MotionEngine. Is that actually what we want?</description>
    </item>
    
  </channel>
</rss>