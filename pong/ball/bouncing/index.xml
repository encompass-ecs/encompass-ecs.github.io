<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bouncing on Encompass Docs</title>
    <link>/pong/ball/bouncing/</link>
    <description>Recent content in Bouncing on Encompass Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 28 May 2019 18:47:18 -0700</lastBuildDate>
    
	<atom:link href="/pong/ball/bouncing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Library Integration</title>
      <link>/pong/ball/bouncing/library_integration/</link>
      <pubDate>Mon, 27 May 2019 13:19:31 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/library_integration/</guid>
      <description>So we&amp;rsquo;ve found a library in our target language that implements some feature we want. In our case it&amp;rsquo;s the bump.lua library that provides AABB collision detection.
Now we need to declare that library to TypeScript so we can use it in our game code.
If you&amp;rsquo;d like a very detailed description of declaration files and how they work, I recommend perusing the official documentation. But I will give a specific use-case walkthrough here.</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>/pong/ball/bouncing/design/</link>
      <pubDate>Tue, 28 May 2019 17:27:59 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/design/</guid>
      <description>Now we have a way to tell when objects are colliding. Let&amp;rsquo;s make something happen as a result!
First, let&amp;rsquo;s think about the structure of a collision system, and how we want it to resolve collisions.
One thing we really don&amp;rsquo;t want is for collision to resolve late. For example, a frame finishing with two solid objects lodged inside each other, and then fixing itself on the next frame. Even if it&amp;rsquo;s only for a frame, it&amp;rsquo;s enough for players to detect some awkwardness.</description>
    </item>
    
    <item>
      <title>Motion Engine: The Revenge</title>
      <link>/pong/ball/bouncing/motion_engine/</link>
      <pubDate>Tue, 28 May 2019 18:01:49 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/motion_engine/</guid>
      <description>Here&amp;rsquo;s the process we&amp;rsquo;ll follow for our MotionEngine:
We associate MotionMessages with their PositionComponents. We consolidate them to get a total &amp;ldquo;x_delta&amp;rdquo; and a &amp;ldquo;y_delta&amp;rdquo;. We create an UpdatePositionMessage containing these values. Next, we create CollisionCheckMessages containing the delta values if the PositionComponent&amp;rsquo;s entity has a BoundingBoxComponent.
Finally, we go over all BoundingBoxComponents that didn&amp;rsquo;t have MotionMessages associated with them and create CollisionCheckMessages for those too. Otherwise things that didn&amp;rsquo;t move wouldn&amp;rsquo;t be collision checked, and that would not be correct.</description>
    </item>
    
    <item>
      <title>Collision Checking</title>
      <link>/pong/ball/bouncing/collision_checking/</link>
      <pubDate>Tue, 28 May 2019 18:51:15 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/collision_checking/</guid>
      <description>In game/engines/collision_message.ts:
import { Entity, Message } from &amp;quot;encompass-ecs&amp;quot;; import { CollisionType } from &amp;quot;game/components/collision_types&amp;quot;; import { Collision } from &amp;quot;lua-lib/bump&amp;quot;; export class CollisionMessage extends Message { public entity_one: Entity; public entity_two: Entity; public collision_type_one: CollisionType; public collision_type_two: CollisionType; public entity_one_new_x: number; public entity_one_new_y: number; public entity_two_new_x: number; public entity_two_new_y: number; public collision_data: Collision; }  Let&amp;rsquo;s break down what we want collision detection to actually do.
First, we tell the Collision World about the current positions of the objects.</description>
    </item>
    
    <item>
      <title>Collision Dispatch</title>
      <link>/pong/ball/bouncing/collision_dispatch/</link>
      <pubDate>Tue, 28 May 2019 19:06:03 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/collision_dispatch/</guid>
      <description>Let&amp;rsquo;s make the CollisionDispatchEngine. All it needs to do is read the CollisionMessages and create specific collision messages from them.
In games/engines/collision_dispatch.ts:
import { Emits, Engine, Reads } from &amp;quot;encompass-ecs&amp;quot;; import { CollisionType } from &amp;quot;game/components/collision_types&amp;quot;; import { CollisionMessage } from &amp;quot;game/messages/collision&amp;quot;; import { BallPaddleCollisionMessage } from &amp;quot;game/messages/collisions/ball_paddle&amp;quot;; import { BallWallCollisionMessage } from &amp;quot;game/messages/collisions/ball_wall&amp;quot;; import { PaddleWallCollisionMessage } from &amp;quot;game/messages/collisions/paddle_wall&amp;quot;; @Reads(CollisionMessage) @Emits(BallPaddleCollisionMessage, BallWallCollisionMessage, PaddleWallCollisionMessage) export class CollisionDispatchEngine extends Engine { public update() { const collision_messages = this.</description>
    </item>
    
    <item>
      <title>Collision Resolution</title>
      <link>/pong/ball/bouncing/collision_resolution/</link>
      <pubDate>Tue, 28 May 2019 20:39:54 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/collision_resolution/</guid>
      <description>What do we want to actually happen when a ball collides with a wall?
Obviously the wall doesn&amp;rsquo;t do anything. It just sits there. That&amp;rsquo;s easy!
The ball needs to bounce off of the wall. We can calculate exactly where it should end up by adding distance along the collision normal equal to twice the difference between the proposed location of the ball and where it touched the wall.
Tip</description>
    </item>
    
    <item>
      <title>Spawners</title>
      <link>/pong/ball/bouncing/spawners/</link>
      <pubDate>Wed, 29 May 2019 11:05:16 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/spawners/</guid>
      <description>Our Entities are getting a bit more complex now with the addition of BoundingBoxComponents and CollisionTypeComponents.
I think we should create Spawners for each of our game entities.
This will be pretty straightforward. Just decide which parameters we need to create our entities, and add the proper components with those parameters.
Ball In game/messages/ball_spawn.ts:
import { Message } from &amp;quot;encompass-ecs&amp;quot;; export class BallSpawnMessage extends Message { public x: number; public y: number; public size: number; public x_velocity: number; public y_velocity: number; }  In game/engines/spawners/ball.</description>
    </item>
    
    <item>
      <title>Putting It All Together</title>
      <link>/pong/ball/bouncing/putting_it_together/</link>
      <pubDate>Tue, 28 May 2019 21:22:44 -0700</pubDate>
      
      <guid>/pong/ball/bouncing/putting_it_together/</guid>
      <description>Finally, we need to set up our initial game state with our spawn messages, and make sure we added and initialized all of our required Engines.
Our load method in game/game.ts should look something like this:
public load() { this.canvas = love.graphics.newCanvas(); const collision_world = CollisionWorld.newWorld(32); const world_builder = new WorldBuilder(); // ADD YOUR ENGINES HERE... world_builder.add_engine(BallSpawner).initialize(collision_world); world_builder.add_engine(GameBoundarySpawner).initialize(collision_world); world_builder.add_engine(PaddleSpawner).initialize(collision_world); world_builder.add_engine(InputEngine); world_builder.add_engine(PaddleMovementEngine); world_builder.add_engine(MotionEngine); world_builder.add_engine(VelocityEngine); world_builder.add_engine(CollisionCheckEngine).initialize(collision_world); world_builder.add_engine(CollisionDispatchEngine); world_builder.add_engine(BallWallCollisionEngine); world_builder.add_engine(BallPaddleCollisionEngine); world_builder.add_engine(UpdatePositionEngine); world_builder.add_engine(UpdateVelocityEngine); // ADD YOUR RENDERERS HERE.</description>
    </item>
    
  </channel>
</rss>